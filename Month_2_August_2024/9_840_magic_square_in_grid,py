from typing import List
class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        count_magic_squares=0
        row_range =0
        column_range =0
        while row_range < len(grid)-2:
            matrix=[]
                # print(row_range)
            # for i in range(0,3): # (0,3)(1,4), (2,5)
            for i in range(row_range, row_range+3):
            # print(i)
        # for j in range(1,4): #(0,3)(1,4)(2,5)
                ar = []
                for j in range(column_range,column_range+3):
            # print(j)
                    ar.append(grid[i][j])
                matrix.append(ar) 
          
            if self.magic_square(matrix):  
                count_magic_squares += 1
    
            if column_range < len(grid[0]) - 3:
                column_range += 1
            else:
                column_range = 0
                row_range += 1
            return count_magic_squares
    def magic_square(self,matrix):
        
        row=0
        col=0
        diagonal=0
        row_1 = matrix[0][0]+matrix[0][1]+matrix[0][2]
        row_2 =matrix[1][0]+matrix[1][1]+matrix[1][2]
        row_3 = matrix[2][0]+matrix[2][1]+matrix[2][2]
        col_1 = matrix[0][0]+matrix[1][0]+matrix[2][0]
        col_2 = matrix[0][1]+matrix[1][1]+matrix[2][1]
        col_3 = matrix[0][2]+matrix[1][2]+matrix[2][2]
        diagonal_1 = matrix[0][0]+matrix[1][1]+matrix[2][2]
        diagonal_2 = matrix[0][2]+matrix[1][1]+matrix[2][0]
        if (row_1 == row_2 == row_3 == 15 and
            col_1 == col_2 == col_3 == 15 and
            diagonal_1 == diagonal_2 == 15):

            elements = set(matrix[i][j] for i in range(3) for j in range(3))
            return elements == set(range(1, 10))
        
        return False  
obj = Solution()
grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2],[1,2,3,4],[1,2,3,4]]
print(obj.numMagicSquaresInside(grid))

# from typing import List
# grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2],[1,2,3,4],[1,2,3,4]]
# count=0
# # print(grid[0][0])
# # 4,3,8,4
# # 9,5,1,9
# # 2,7,6,2
# # 1,2,3,4
# # 1,2,3,4
# K = 0
# L=3

# while K<len(grid[0])-2 and L <len(grid)-1:
#     print(K,L)
#     matrixs= [ ]
#     for i in range(K,L):
#     # print(i)
#         ar = []
#         for j in range(K,L):
#         # print(j)
#         # print(grid[i][j])
#             ar.append(grid[i][j])
#         matrixs.append(ar)   
#     K+=1
#     L+=1
#     print(matrixs)
#         # print(grid[i],grid[j])